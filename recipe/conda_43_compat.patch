diff --git a/conda_build_all/builder.py b/conda_build_all/builder.py
index a5740ca..e4a0872 100644
--- a/conda_build_all/builder.py
+++ b/conda_build_all/builder.py
@@ -214,7 +214,11 @@ class Builder(object):
 
         """
         all_distros = []
-        index = index.copy()
+        try:
+            from conda.models.dist import Dist
+            index = {Dist(key):index[key] for key in index.keys()}
+        except ImportError:
+            index = index.copy()
         for meta in recipes:
             distros = resolved_distribution.ResolvedDistribution.resolve_all(meta, index,
                                                                              self.matrix_conditions)
diff --git a/conda_build_all/version_matrix.py b/conda_build_all/version_matrix.py
index 8acb31f..0930131 100644
--- a/conda_build_all/version_matrix.py
+++ b/conda_build_all/version_matrix.py
@@ -126,6 +126,14 @@ def special_case_version_matrix(meta, index):
         ... build ...
 
     """
+    try:
+        from conda.models.dist import Dist
+        index = {Dist(key): index[key] for key in index.keys()}
+        def get_key(dist_or_filename):
+            return dist_or_filename
+    except ImportError:
+        def get_key(dist_or_filename):
+            return dist_or_filename.fn
     r = conda.resolve.Resolve(index)
 
     requirements = meta.get_value('requirements/build', [])
@@ -172,6 +180,7 @@ def special_case_version_matrix(meta, index):
 
     def get_pkgs(spec):
         try:
+            # should be r.get_dists_for_spec(spec) for conda-4.3+
             return r.get_pkgs(spec)
         except NO_PACKAGES_EXCEPTION:
             # If no package is found in the channel, we do nothing
@@ -204,15 +213,15 @@ def special_case_version_matrix(meta, index):
             np_spec = requirement_specs.pop('numpy')
             py_spec = requirement_specs.pop('python', None)
             for numpy_pkg in get_pkgs(np_spec):
-                np_vn = minor_vn(index[numpy_pkg.fn]['version'])
-                numpy_deps = index[numpy_pkg.fn]['depends']
+                np_vn = minor_vn(index[get_key(numpy_pkg)]['version'])
+                numpy_deps = index[get_key(numpy_pkg)]['depends']
                 numpy_deps = {MatchSpec(spec).name: MatchSpec(spec)
                               for spec in numpy_deps}
                 # This would be problematic if python wasn't a dep of numpy.
                 for python_pkg in get_pkgs(numpy_deps['python']):
-                    if py_spec and not py_spec.match(python_pkg.fn):
+                    if py_spec and not py_spec.match(get_key(python_pkg)):
                         continue
-                    py_vn = minor_vn(index[python_pkg.fn]['version'])
+                    py_vn = minor_vn(index[get_key(python_pkg)]['version'])
                     case = (('python', py_vn),
                             ('numpy', np_vn),
                             )
@@ -220,7 +229,7 @@ def special_case_version_matrix(meta, index):
         elif 'python' in requirement_specs:
             py_spec = requirement_specs.pop('python')
             for python_pkg in get_pkgs(py_spec):
-                py_vn = minor_vn(index[python_pkg.fn]['version'])
+                py_vn = minor_vn(index[get_key(python_pkg)]['version'])
                 case = (('python', py_vn), )
                 add_case_if_soluble(case)
 
@@ -228,7 +237,7 @@ def special_case_version_matrix(meta, index):
             pl_spec = requirement_specs.pop('perl')
             for case_base in list(cases or [()]):
                 for perl_pkg in get_pkgs(pl_spec):
-                    pl_vn = index[perl_pkg.fn]['version']
+                    pl_vn = index[get_key(perl_pkg)]['version']
                     case = case_base + (('perl', pl_vn), )
                     add_case_if_soluble(case)
                 if case_base in cases:
@@ -238,7 +247,7 @@ def special_case_version_matrix(meta, index):
             r_spec = requirement_specs.pop('r-base')
             for case_base in list(cases or [()]):
                 for r_pkg in get_pkgs(r_spec):
-                    r_vn = index[r_pkg.fn]['version']
+                    r_vn = index[get_key(r_pkg)]['version']
                     case = case_base + (('r-base', r_vn), )
                     add_case_if_soluble(case)
                 if case_base in cases:
@@ -256,6 +265,12 @@ def special_case_version_matrix(meta, index):
 
     return set(cases)
 
+def _ensure_dist_or_dict(fn):
+    try:
+        from conda.models.dist import Dist
+        return Dist.from_string(fn)
+    except ImportError:
+        return fn
 
 def filter_cases(cases, extra_specs):
     """
@@ -280,7 +295,7 @@ def filter_cases(cases, extra_specs):
         for spec in specs:
             # Only run the filter on the packages in cases.
             if spec.name in cases_by_pkg_name:
-                match.append(bool(spec.match(cases_by_pkg_name[spec.name])))
+                match.append(bool(spec.match(_ensure_dist_or_dict(cases_by_pkg_name[spec.name]))))
         if all(match):
             yield case
 
